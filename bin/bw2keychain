#!/opt/homebrew/bin/bash
set -euo pipefail

# Sync Bitwarden -> macOS Keychain, then generate ~/.zshrc-creds
# Requirements: bw (Bitwarden CLI), jq, security (macOS), bash
#
# Usage:
#   bw2keychain                 # uses note "zshrc-env"
#   bw2keychain --note NAME     # use a different Bitwarden Secure Note name
#   bw2keychain --dry-run       # show what would change without writing
#
# Environment:
#   BW_SESSION=<token>          # optional; if missing, we'll try `bw unlock --raw`

NOTE_NAME="zshrc-env"
DRY_RUN=0
ZSH_CREDS_FILE="${HOME}/.zshrc-creds"

while [[ $# -gt 0 ]]; do
  case "$1" in
    --note) NOTE_NAME="${2:?}"; shift 2 ;;
    --dry-run) DRY_RUN=1; shift ;;
    *) echo "Unknown arg: $1" >&2; exit 2 ;;
  esac
done

require() {
  command -v "$1" >/dev/null 2>&1 || { echo "Missing dependency: $1" >&2; exit 1; }
}
require bw
require jq
require security

# Ensure bw is unlocked and we have a session
ensure_bw_session() {
  if [[ -z "${BW_SESSION:-}" ]]; then
    # If already logged in and locked, unlock; if logged out, this will error and tell user to `bw login`
    if ! bw status >/dev/null 2>&1; then
      echo "Bitwarden CLI not logged in. Run: bw login" >&2
      exit 1
    fi
    echo "Unlocking Bitwarden vault..."
    BW_SESSION="$(bw unlock --raw)"
    export BW_SESSION
  else
    # Validate session
    if ! bw list items --search test >/dev/null 2>&1; then
      echo "Provided BW_SESSION seems invalid. Try unsetting it and rerun." >&2
      exit 1
    fi
  fi
}

# Fetch the secure note content (the dotenv)
fetch_dotenv_from_note() {
  local id
  id="$(bw list items --search "$NOTE_NAME" | jq -r '.[0].id // empty')"
  if [[ -z "$id" ]]; then
    echo "Could not find Bitwarden item named '$NOTE_NAME'." >&2
    exit 1
  fi
  bw get item "$id" | jq -r '.notes // empty'
}

# Parse dotenv lines safely: KEY=VALUE (supports quoted values)
# Yields lines "KEY <NUL> VALUE" for safe splitting
parse_dotenv() {
  awk '
    /^[[:space:]]*#/ { next }          # skip comments
    /^[[:space:]]*$/ { next }          # skip blanks
    /=/ {
      # Split on first = only
      eq_pos = index($0, "=")
      key = substr($0, 1, eq_pos - 1)
      val = substr($0, eq_pos + 1)

      # Trim whitespace from key
      gsub(/^[[:space:]]+|[[:space:]]+$/, "", key)

      # Trim whitespace from value
      gsub(/^[[:space:]]+|[[:space:]]+$/, "", val)

      # Strip matching quotes
      if ((val ~ /^".*"$/) || (val ~ /^'\''.*'\''$/)) {
        val = substr(val, 2, length(val) - 2)
      }

      # Print as KEY=VALUE (simple format)
      printf("%s=%s\n", key, val)
    }
  '
}

add_or_update_keychain() {
  local key="$1" val="$2"
  if [[ "$DRY_RUN" -eq 1 ]]; then
    echo "[dry-run] security add-generic-password -U -a $USER -D 'environment variable' -s '$key' -w '********'"
  else
    security add-generic-password -U -a "$USER" -D "environment variable" -s "$key" -w "$val" >/dev/null
  fi
}

generate_zshrc_creds() {
  local keys=("$@")
  if [[ "$DRY_RUN" -eq 1 ]]; then
    echo "[dry-run] Would write $ZSH_CREDS_FILE with ${#keys[@]} exports"
    return
  fi

  {
    echo '# Auto-generated by bw2keychain. Do not edit here.'
    echo '# Source this from your ~/.zshrc to populate env from macOS Keychain.'
    echo ''
    echo 'function keychain-get () {'
    echo '  [ -n "$1" ] || { echo "Missing environment variable name" >&2; return 1; }'
    echo '  security find-generic-password -w -a ${USER} -D "environment variable" -s "${1}"'
    echo '}'
    echo ''
    for k in "${keys[@]}"; do
      # Use backticks for compatibility with your existing pattern
      printf 'export %s=`keychain-get %s`\n' "$k" "$k"
    done
  } > "$ZSH_CREDS_FILE"

  echo "Wrote ${ZSH_CREDS_FILE} with ${#keys[@]} exports."
  echo "Add this to your ~/.zshrc if you havenâ€™t already:"
  echo "  [[ -f ${ZSH_CREDS_FILE} ]] && source ${ZSH_CREDS_FILE}"
}

main() {
  ensure_bw_session
  local dotenv
  dotenv="$(fetch_dotenv_from_note)"
  if [[ -z "$dotenv" ]]; then
    echo "The Bitwarden note '$NOTE_NAME' is empty (or missing .notes)." >&2
    exit 1
  fi

  echo "Syncing secrets from Bitwarden note: $NOTE_NAME"

  # Parse dotenv and process each line
  updated_keys=()
  while IFS='=' read -r key val; do
    if [[ -z "$key" ]]; then continue; fi
    add_or_update_keychain "$key" "$val"
    updated_keys+=("$key")
  done < <(printf "%s\n" "$dotenv" | parse_dotenv)

  if [[ "${#updated_keys[@]}" -eq 0 ]]; then
    echo "No KEY=VALUE pairs found in the note." >&2
    exit 1
  fi

  echo "Updated ${#updated_keys[@]} keychain entrie(s)."
  generate_zshrc_creds "${updated_keys[@]}"
}

main "$@"
